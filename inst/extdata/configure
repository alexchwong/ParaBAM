#!/usr/bin/env sh

# Find R compilers
CXX=`${R_HOME}/bin/R CMD config CXX`
CPPFLAGS=`${R_HOME}/bin/R CMD config CPPFLAGS`
# compiler and flags to 'cxx' file
echo "CXX=${CXX}" > inst/cxx
echo "CPPFLAGS=${CPPFLAGS}" >> inst/cxx

cat <<EOF > test-omp.cpp
#include <omp.h>
int main() {
  return omp_get_num_threads();
}
EOF

# First, try R CMD SHLIB to see if R can already compile
# things using OpenMP without any extra help from data.table
"${R_HOME}/bin/R" CMD SHLIB test-omp.cpp >/dev/null 2>&1 || R_NO_OPENMP=1

if [ "$R_NO_OPENMP" = "1" ]; then
  # Compilation failed -- try forcing -fopenmp instead.
  R_NO_OPENMP=0
  "${CXX}" "${CPPFLAGS}" -fopenmp test-omp.cpp || R_NO_OPENMP=1
  # TODO: and then nothing seems to be done with this outcome
else
  echo "R CMD SHLIB supports OpenMP without any extra hint"
fi

# Clean up.
rm -f test-omp.* a.out

# Write to Makevars
if [ "$R_NO_OPENMP" = "1" ]; then
	echo "*** Continuing installation without OpenMP support..."
	# Nothing needs to be done
else
	echo "*** Compiling with OpenMP support..."
	#make the Makevars file
	if [ ! -e "./src/Makevars" ]; then
		#make the Makevars file
		touch ./src/Makevars
	fi
	
	if [[ `uname` -eq Darwin ]] ; then
		#if mac
		echo "CPPFLAGS += -Xclang -fopenmp" >> ./src/Makevars
		echo "LDFLAGS += -lomp" >> ./src/Makevars
	
	elif [[ `uname` -eq Linux ]] ;then
		#if linux
		echo "PKG_CXXFLAGS = $(SHLIB_OPENMP_CXXFLAGS)" >> ./src/Makevars
		echo "PKG_LIBS = $(SHLIB_OPENMP_CXXFLAGS)" >> ./src/Makevars
	fi
fi
